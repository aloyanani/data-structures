class MyCalendar {
private:
    
   std::map<int, int> myMap;
public:
   bool book(int start, int end){
   
    auto it = myMap.begin();
    while( it != myMap.end() && it->first < start )
    {
      if(it->second > start)
      {
          return false;
      }
      ++it;
    }class MyCalendar {
private:
    
   std::map<int, int> myMap;
public:
   bool book(int start, int end){
   
    auto it = myMap.begin();
    while( it != myMap.end() && it->first < start )
    {
      if(it->second > start)
      {
          return false;
      }
      ++it;
    }
    
    if( it != myMap.end() && it->first < end)
    {
        return false;
    }
    
    myMap[start] = end;
    return true;
     
}
};

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar* obj = new MyCalendar();
 * bool param_1 = obj->book(start,end);
 */
    
    if( it != myMap.end() && it->first < end)
    {
        return false;
    }
    
    myMap[start] = end;
    return true;
     
}
};

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar* obj = new MyCalendar();
 * bool param_1 = obj->book(start,end);
 */
