#include <iostream>
#include <vector>
#include <unordered_map>


bool containsNearbyDuplicate(vector<int>& nums, int k) {
    unordered_map<int, int> indexMap;

    for (int i = 0; i < nums.size(); ++i) {
        if (indexMap.find(nums[i]) != indexMap.end() && i - indexMap[nums[i]] <= k) {
            return true;
        }
        indexMap[nums[i]] = i;
    }

    return false;
}

int main() {
    
    vector<int> nums1 = {1, 2, 3, 1};
    int k1 = 3;
    std::cout << boolalpha << containsNearbyDuplicate(nums1, k1) << std::endl; 
    
    vector<int> nums2 = {1, 0, 1, 1};
    int k2 = 1;
    std::cout << boolalpha << containsNearbyDuplicate(nums2, k2) << std::endl; 
  
    vector<int> nums3 = {1, 2, 3, 1, 2, 3};
    int k3 = 2;
    std::cout << boolalpha << containsNearbyDuplicate(nums3, k3) << std::endl;
    return 0;
}
